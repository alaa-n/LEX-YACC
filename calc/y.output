State 68 conflicts: 10 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program statement
    2        | /* empty */

    3 statement: expr NEWLINE
    4          | VARIABLE ASSIGN expr NEWLINE

    5 expr: INTEGER
    6     | HEX
    7     | VARIABLE
    8     | comparison
    9     | LPAREN expr RPAREN
   10     | PLUS expr
   11     | MINUS expr
   12     | expr MINUS expr
   13     | expr PLUS expr
   14     | expr TIMES expr
   15     | expr DIVIDE expr
   16     | expr MOD expr
   17     | function
   18     | condition

   19 comparison: expr GREATER expr
   20           | expr GR_EQUAL expr
   21           | expr EQUAL expr
   22           | expr LESS_EQUAL expr
   23           | expr LESS expr

   24 function: MIN LPAREN min RPAREN
   25         | MAX LPAREN max RPAREN
   26         | AVG LPAREN avg RPAREN

   27 min: expr COMMA min
   28    | expr

   29 max: expr COMMA max
   30    | expr

   31 sum: expr COMMA sum
   32    | expr

   33 avg: sum

   34 condition: LPAREN expr RPAREN IF expr ELSE expr


Terminals, with rules where they appear

$end (0) 0
error (256)
VARIABLE (258) 4 7
ASSIGN (259) 4
INTEGER (260) 5
NEWLINE (261) 3 4
HEX (262) 6
LPAREN (263) 9 24 25 26 34
RPAREN (264) 9 24 25 26 34
MIN (265) 24
MAX (266) 25
AVG (267) 26
COMMA (268) 27 29 31
IF (269) 34
ELSE (270) 34
MOD (271) 16
MINUS (272) 11 12
PLUS (273) 10 13
DIVIDE (274) 15
TIMES (275) 14
LESS (276) 23
LESS_EQUAL (277) 22
EQUAL (278) 21
GR_EQUAL (279) 20
GREATER (280) 19


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
program (27)
    on left: 1 2, on right: 0 1
statement (28)
    on left: 3 4, on right: 1
expr (29)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18, on right: 3 4 9
    10 11 12 13 14 15 16 19 20 21 22 23 27 28 29 30 31 32 34
comparison (30)
    on left: 19 20 21 22 23, on right: 8
function (31)
    on left: 24 25 26, on right: 17
min (32)
    on left: 27 28, on right: 24 27
max (33)
    on left: 29 30, on right: 25 29
sum (34)
    on left: 31 32, on right: 31 33
avg (35)
    on left: 33, on right: 26
condition (36)
    on left: 34, on right: 18


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . statement

    $end      shift, and go to state 2
    VARIABLE  shift, and go to state 3
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    statement   go to state 12
    expr        go to state 13
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 2

    0 $accept: program $end .

    $default  accept


state 3

    4 statement: VARIABLE . ASSIGN expr NEWLINE
    7 expr: VARIABLE .

    ASSIGN  shift, and go to state 17

    $default  reduce using rule 7 (expr)


state 4

    5 expr: INTEGER .

    $default  reduce using rule 5 (expr)


state 5

    6 expr: HEX .

    $default  reduce using rule 6 (expr)


state 6

    9 expr: LPAREN . expr RPAREN
   34 condition: LPAREN . expr RPAREN IF expr ELSE expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 19
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 7

   24 function: MIN . LPAREN min RPAREN

    LPAREN  shift, and go to state 20


state 8

   25 function: MAX . LPAREN max RPAREN

    LPAREN  shift, and go to state 21


state 9

   26 function: AVG . LPAREN avg RPAREN

    LPAREN  shift, and go to state 22


state 10

   11 expr: MINUS . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 23
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 11

   10 expr: PLUS . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 24
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 12

    1 program: program statement .

    $default  reduce using rule 1 (program)


state 13

    3 statement: expr . NEWLINE
   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    NEWLINE     shift, and go to state 25
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35


state 14

    8 expr: comparison .

    $default  reduce using rule 8 (expr)


state 15

   17 expr: function .

    $default  reduce using rule 17 (expr)


state 16

   18 expr: condition .

    $default  reduce using rule 18 (expr)


state 17

    4 statement: VARIABLE ASSIGN . expr NEWLINE

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 36
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 18

    7 expr: VARIABLE .

    $default  reduce using rule 7 (expr)


state 19

    9 expr: LPAREN expr . RPAREN
   12     | expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   34 condition: LPAREN expr . RPAREN IF expr ELSE expr

    RPAREN      shift, and go to state 37
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35


state 20

   24 function: MIN LPAREN . min RPAREN

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 38
    comparison  go to state 14
    function    go to state 15
    min         go to state 39
    condition   go to state 16


state 21

   25 function: MAX LPAREN . max RPAREN

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 40
    comparison  go to state 14
    function    go to state 15
    max         go to state 41
    condition   go to state 16


state 22

   26 function: AVG LPAREN . avg RPAREN

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 42
    comparison  go to state 14
    function    go to state 15
    sum         go to state 43
    avg         go to state 44
    condition   go to state 16


state 23

   11 expr: MINUS expr .
   12     | expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 11 (expr)


state 24

   10 expr: PLUS expr .
   12     | expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 10 (expr)


state 25

    3 statement: expr NEWLINE .

    $default  reduce using rule 3 (statement)


state 26

   16 expr: expr MOD . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 45
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 27

   12 expr: expr MINUS . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 46
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 28

   13 expr: expr PLUS . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 47
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 29

   15 expr: expr DIVIDE . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 48
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 30

   14 expr: expr TIMES . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 49
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 31

   23 comparison: expr LESS . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 50
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 32

   22 comparison: expr LESS_EQUAL . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 51
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 33

   21 comparison: expr EQUAL . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 52
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 34

   20 comparison: expr GR_EQUAL . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 53
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 35

   19 comparison: expr GREATER . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 54
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 36

    4 statement: VARIABLE ASSIGN expr . NEWLINE
   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    NEWLINE     shift, and go to state 55
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35


state 37

    9 expr: LPAREN expr RPAREN .
   34 condition: LPAREN expr RPAREN . IF expr ELSE expr

    IF  shift, and go to state 56

    $default  reduce using rule 9 (expr)


state 38

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   27 min: expr . COMMA min
   28    | expr .

    COMMA       shift, and go to state 57
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 28 (min)


state 39

   24 function: MIN LPAREN min . RPAREN

    RPAREN  shift, and go to state 58


state 40

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   29 max: expr . COMMA max
   30    | expr .

    COMMA       shift, and go to state 59
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 30 (max)


state 41

   25 function: MAX LPAREN max . RPAREN

    RPAREN  shift, and go to state 60


state 42

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   31 sum: expr . COMMA sum
   32    | expr .

    COMMA       shift, and go to state 61
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 32 (sum)


state 43

   33 avg: sum .

    $default  reduce using rule 33 (avg)


state 44

   26 function: AVG LPAREN avg . RPAREN

    RPAREN  shift, and go to state 62


state 45

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   16     | expr MOD expr .
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 16 (expr)


state 46

   12 expr: expr . MINUS expr
   12     | expr MINUS expr .
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 12 (expr)


state 47

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   13     | expr PLUS expr .
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 13 (expr)


state 48

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   15     | expr DIVIDE expr .
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 15 (expr)


state 49

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   14     | expr TIMES expr .
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    $default  reduce using rule 14 (expr)


state 50

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   23           | expr LESS expr .

    $default  reduce using rule 23 (comparison)


state 51

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   22           | expr LESS_EQUAL expr .
   23           | expr . LESS expr

    $default  reduce using rule 22 (comparison)


state 52

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   21           | expr EQUAL expr .
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    $default  reduce using rule 21 (comparison)


state 53

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   20           | expr GR_EQUAL expr .
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    $default  reduce using rule 20 (comparison)


state 54

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   19           | expr GREATER expr .
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr

    $default  reduce using rule 19 (comparison)


state 55

    4 statement: VARIABLE ASSIGN expr NEWLINE .

    $default  reduce using rule 4 (statement)


state 56

   34 condition: LPAREN expr RPAREN IF . expr ELSE expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 63
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 57

   27 min: expr COMMA . min

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 38
    comparison  go to state 14
    function    go to state 15
    min         go to state 64
    condition   go to state 16


state 58

   24 function: MIN LPAREN min RPAREN .

    $default  reduce using rule 24 (function)


state 59

   29 max: expr COMMA . max

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 40
    comparison  go to state 14
    function    go to state 15
    max         go to state 65
    condition   go to state 16


state 60

   25 function: MAX LPAREN max RPAREN .

    $default  reduce using rule 25 (function)


state 61

   31 sum: expr COMMA . sum

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 42
    comparison  go to state 14
    function    go to state 15
    sum         go to state 66
    condition   go to state 16


state 62

   26 function: AVG LPAREN avg RPAREN .

    $default  reduce using rule 26 (function)


state 63

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   34 condition: LPAREN expr RPAREN IF expr . ELSE expr

    ELSE        shift, and go to state 67
    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35


state 64

   27 min: expr COMMA min .

    $default  reduce using rule 27 (min)


state 65

   29 max: expr COMMA max .

    $default  reduce using rule 29 (max)


state 66

   31 sum: expr COMMA sum .

    $default  reduce using rule 31 (sum)


state 67

   34 condition: LPAREN expr RPAREN IF expr ELSE . expr

    VARIABLE  shift, and go to state 18
    INTEGER   shift, and go to state 4
    HEX       shift, and go to state 5
    LPAREN    shift, and go to state 6
    MIN       shift, and go to state 7
    MAX       shift, and go to state 8
    AVG       shift, and go to state 9
    MINUS     shift, and go to state 10
    PLUS      shift, and go to state 11

    expr        go to state 68
    comparison  go to state 14
    function    go to state 15
    condition   go to state 16


state 68

   12 expr: expr . MINUS expr
   13     | expr . PLUS expr
   14     | expr . TIMES expr
   15     | expr . DIVIDE expr
   16     | expr . MOD expr
   19 comparison: expr . GREATER expr
   20           | expr . GR_EQUAL expr
   21           | expr . EQUAL expr
   22           | expr . LESS_EQUAL expr
   23           | expr . LESS expr
   34 condition: LPAREN expr RPAREN IF expr ELSE expr .

    MOD         shift, and go to state 26
    MINUS       shift, and go to state 27
    PLUS        shift, and go to state 28
    DIVIDE      shift, and go to state 29
    TIMES       shift, and go to state 30
    LESS        shift, and go to state 31
    LESS_EQUAL  shift, and go to state 32
    EQUAL       shift, and go to state 33
    GR_EQUAL    shift, and go to state 34
    GREATER     shift, and go to state 35

    MOD         [reduce using rule 34 (condition)]
    MINUS       [reduce using rule 34 (condition)]
    PLUS        [reduce using rule 34 (condition)]
    DIVIDE      [reduce using rule 34 (condition)]
    TIMES       [reduce using rule 34 (condition)]
    LESS        [reduce using rule 34 (condition)]
    LESS_EQUAL  [reduce using rule 34 (condition)]
    EQUAL       [reduce using rule 34 (condition)]
    GR_EQUAL    [reduce using rule 34 (condition)]
    GREATER     [reduce using rule 34 (condition)]
    $default    reduce using rule 34 (condition)
